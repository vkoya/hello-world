import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    /*
     * @param numbers : An array of Integer
     * @param target : target = numbers[index1] + numbers[index2]
     * @return : [index1 + 1, index2 + 1] (index1 < index2)
     */
    public static int[] twoSumNPower2(int[] numbers, int target) {
        // O(n^2) runtime, O(1) space - Brute force:
        for (int i = 0; i < numbers.length ; i++) {
            for (int j = i + 1 ; j < numbers.length ; j++) {
                if(numbers[j] == target - numbers[i]) {
                    return new int[] { i + 1, j + 1};
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }

    public static int[] twoSum(int[] numbers, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        // O(n) runtime
        for (int i = 0; i < numbers.length ; i++) {
            // O(n) space - Hash table:
            int x = numbers[i];
            if(map.containsKey(target - x)) {
                return new int[] { map.get(target - x) + 1, i + 1};
            }
            map.put(x, i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }

    public static void main(String[] args) {
        int[] numbers= {2, 7, 11, 15};
        int[] list = twoSumNPower2(numbers, 9);

        System.out.println(list[0] + " " + list[1]);

        list = twoSum(numbers, 9);

        System.out.println(list[0] + " " + list[1]);

    }
}
